<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: practice | Han Ngo]]></title>
  <link href="http://tieubao.github.io/writing/blog/categories/practice/atom.xml" rel="self"/>
  <link href="http://tieubao.github.io/writing/"/>
  <updated>2020-06-02T02:20:45+07:00</updated>
  <id>http://tieubao.github.io/writing/</id>
  <author>
    <name><![CDATA[Han Ngo]]></name>
    <email><![CDATA[nntruonghan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cofounder Agreement]]></title>
    <link href="http://tieubao.github.io/writing/a/cofounder-agreement/"/>
    <updated>2018-02-15T17:41:37+07:00</updated>
    <id>http://tieubao.github.io/writing/a/cofounder-agreement</id>
    <content type="html"><![CDATA[<h1>Ensure Alignment of Vision</h1>

<p>As you and your cofounder (or cofounders) embark on your entrepreneurial journey together, it’s imperative that you all share the same vision for the purpose and future of your company. It’s easy to get caught up in the thrill of launching a potentially successful startup together, but you all must take the time to establish the existential foundations of the company, and as early as possible, to help prevent the possibility of a drastic falling out later on.</p>

<h3>What Are Your Goals?</h3>

<ul>
<li>Why are you creating this startup?</li>
<li>What need will it fill?</li>
<li>What will your initial product/service offering be?</li>
<li>And what is your strategy for growing the company?</li>
</ul>


<h3>What Are Your Company Values and Philosophy?</h3>

<p>Your company’s success depends on vision alignment (alignment between you and your investors, your employees, and your customers, etc.). Do you share the same priorities? Do you agree on what’s most important to you both personally and for the future of your company?</p>

<h3>How Do You Measure Success?</h3>

<ul>
<li>What do you and your co-founder(s) hope to get out of this business?</li>
<li>How will you know if you’ve achieved your goals?</li>
<li>If you don’t agree on the same goals, how will you know when you’ve achieved them?</li>
</ul>


<blockquote><p>&ldquo;Discussing these issues with your co-founder could get uncomfortable, create rifts, or even uncover deal-breakers. If you are able to successfully have these difficult conversations, this is a testament to your partnership and to the strength of your relationship &mdash; and will serve as a solid foundation from which to grow your business.&rdquo; &ndash; David Ehrenberg</p></blockquote>

<h3>Working Styles and Culture</h3>

<p>Once you and your cofounder have laid down the aspirational and philosophical groundwork for your startup, this is also the ideal time to determine what kind of working environment best complements the vision of your startup.</p>

<ul>
<li>What 3 words best describe the startup culture you want to create (e.g. open, hard-working, eccentric, etc.)? Pro-tip: If you’re really serious and far along go visit few office spaces together to get a sense of what each of you likes work environments wise and why.</li>
<li>What values do we want to instill in our employees?</li>
<li>If you could pick 2 things to change about our company, and two things to bring with you from your previous experience, what would they be and why?</li>
<li>How much equity are we allocating for future employees?</li>
<li>What should we look for in our first 5 hires?</li>
<li>Describe your ideal working style.</li>
</ul>


<h1>Legal Decisions &amp; Definitions</h1>

<h3>General Questions</h3>

<ul>
<li>Is the percentage ownership subject to vesting based on continued participation in the business?</li>
<li>If one founder leaves, does the company or the other founder have the right to buy back that founder’s shares? At what price?=</li>
<li>What salaries (if any), are the founders entitled to? How can that be changed?</li>
<li>How are key decisions and day-to-day decisions of the business to be made?</li>
</ul>


<h3>Basic Legal Definitions</h3>

<p>Harroch&rsquo;s article also explores numerous basic legal terms associated with launching a startup, all of which you and your business partner should familiarize yourselves with.</p>

<ul>
<li>Confidentiality Agreements &ndash; These are also referred to as Non-Disclosure Agreements or NDAs. The purpose of the agreement is to allow the holder of confidential information to share it with a third party.</li>
<li>Copyright &ndash; A copyright gives the owner the exclusive right to make copies of the work and to prepare derivative works (such as sequels or revisions) based on the work.</li>
<li>General Partnership &ndash; If there is more than one founder, a general partnership is often chosen as the legal form of business entity.</li>
<li>Patent &ndash; A patent gives its inventor the right to prevent others from making, using, or selling the patented subjected matter described in words in the patent’s claims.</li>
<li>Service marks &ndash; Service marks resemble trademarks and are used to identify services.</li>
<li>Tax Incentive &ndash; Depending on the nature of the business, various tax incentives may be available, such as renewable energy tax credits and investment tax credits.</li>
<li>Trademark &ndash; A trademark right protects the symbolic value of a word, name, symbol, or device that the trademark owner used to identify or distinguish its good from those of others.</li>
<li>Trade Secret &ndash; A trade secret right allows the owner of the right to take action against anyone who breaches an agreement or confidential relationship or who steals or uses other improper means to obtain secret information.</li>
</ul>


<h3>Include a Vesting Schedule When Issuing Shares to Co-founders</h3>

<p>When you create a vesting schedule, this means that the co-founder will earn their shares over time and protects you and the company if that a co-founder leaves the company or doesn&rsquo;t pull their weight. The standard vesting period is four years, with monthly vesting of shares. Unvested shares should be subject to repurchase by the company if the co-founder leaves the company.</p>

<h3>Protect Your Valuable Intellectual Property</h3>

<p>If intellectual property is a vital element of your business, it&rsquo;s important to protect that IP during the formative stages of a company. You can address this issue by relying on patents, trademarks, copyrights, and trade secrets to protect your valuable IP. Another step you can take is requiring all co-founders and any third-party developers to assign to the company their rights in IP they created and that is utilized by the company. Doing this will help prevent trouble if a co-founder leaves the company and takes a crucial patent with them.</p>

<h1>How to Split Equity</h1>

<h3>Ideas are Valuable</h3>

<p>If you brought the original concept to the table, increase your share holdings by about 5 percent. While execution is more important in the long run, whoever conceived the original idea deserves a little extra credit.</p>

<h3>That First Step is a Doozy</h3>

<p>Bringing something of value to the company during its formative stages – like a filed patent (not a provisional), a compelling demo, an early version of the product, or something else that means much of the work towards financing or revenue is already done – you should receive a considerable part of the equity.</p>

<h3>Full Time Commitment is Expensive</h3>

<p>Bottom line, if you’re working more, then you’re risking a lot more if the project fails, which means that you are entitled to more if the project succeeds. Also, keep in mind that part-time cofounders are a big minus to someone considering an investment, so choose your partners wisely.</p>

<h3>The CEO Gets More. Always.</h3>

<p>Splitting equity equally means that no one controls the company more than anyone else. But if that’s the case, than having a CEO is useless, as well as having any form of upper management. So, whoever is the designated CEO should get another slightly more equity. If you think that’s unfair, remember that market rate for a great CEO is higher than market rate for a great CTO, which means that’s how it is everywhere.</p>

<h3>Reputation Counts</h3>

<p>If you’re a beginning entrepreneur and your partner is an experienced founder with an established reputation, they deserve more equity. If that founder has an expansive network that benefits the company, they deserve more equity. If that founder can help secure more funding for your company, they deserve more equity.</p>

<blockquote><p>&ldquo;The question of equity brings out the most fundamental differences, perceptions, and values in an aspiring startup. In fact the equity question, more than any other, may strangle a young company before it can even get started. And that’s a damn good thing.&rdquo; &ndash; Dan Shapiro</p></blockquote>

<h1>Final Thoughts</h1>

<p>Yes, talking about such topics as company roles and vision and equity and the like can be uncomfortable among founders. However, these discussions are vital to a successful partnership, as well as a successful startup, and must be held before any of you invest too much time, energy, and money into a potential company. Keep in mind that whoever you decide to launch a company with, you all will have to make countless difficult decisions once your company is actually up and running. If you take nothing else from this blog post, at least follow the bit of advice below:</p>

<blockquote><p>&ldquo;Choose co-founders the way you would choose a spouse. The reality is that you will, at least in the early days, spend far more time with your co-founders than your partner.&rdquo; &ndash; Danielle Newnham</p></blockquote>

<h4>Source: <a href="https://fi.co/insight/how-to-create-the-perfect-cofounder-agreement-with-your-business-partner">fi.co</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git practices at Dwarves Foundation]]></title>
    <link href="http://tieubao.github.io/writing/a/git-practices-at-dwarves-foundation/"/>
    <updated>2016-06-20T04:32:09+07:00</updated>
    <id>http://tieubao.github.io/writing/a/git-practices-at-dwarves-foundation</id>
    <content type="html"><![CDATA[<p>Git is one of the most popular source control. Github is one platform built over the top of Git and well adapted by lots of companies. Knowing the right workflow will help to increase team productivity. In this post, I will try to cover some of the best practices from the community and the way we applied them at <a href="https://www.dwarves.foundation">Dwarves Foundation</a>.</p>

<h1>Know how to write good commit message</h1>

<blockquote><p>Source: <a href="http://chris.beams.io/posts/git-commit/">http://chris.beams.io/posts/git-commit/</a></p></blockquote>

<p><img src="/images/blog/2016-06-27-git-commit.png"></p>

<p>Have you ever read some repos with commit messages like above?</p>

<p>While many repositories' logs look like the former, there are exceptions. The <a href="https://github.com/torvalds/linux/commits/master">Linux kernel</a> and <a href="https://github.com/git/git/commits/master">git itself</a> are great examples. Look at <a href="https://github.com/spring-projects/spring-boot/commits/master">Spring Boot</a>, or any repository managed by <a href="https://github.com/tpope/vim-pathogen/commits/master">Tim Pope</a>. The contributors to these repositories know that a well-crafted git commit message is the best way to communicate context about a change to fellow developers (and indeed to their future selves). A diff will tell you what changed, but only the commit message can properly tell you why.</p>

<p>Being known that, a project&rsquo;s long-term success rests (among other things) on its maintainability, reviewing others commits and pull requests is also the big reason that you should write great commit messages.</p>

<p>In the post, the author wants to address the most basic elements of keeping a healthy commit history: how to write an individual commit message. You can checkout the source article or just follow the <strong>seven rules</strong> below and you&rsquo;re on your way to committing like a pro</p>

<ol>
<li>Separate subject from body with a blank line</li>
<li>Limit the subject line to 50 characters</li>
<li>Capitalize the subject line</li>
<li>Do not end the subject line with a period</li>
<li>Use the imperative mood in the subject line</li>
<li>Wrap the body at 72 characters</li>
<li>Use the body to explain what and why vs. how</li>
</ol>


<h1>Git branching model</h1>

<h1>Gitflow</h1>

<p>Inspired by Vincent Driessen&rsquo;s branching model, git-flow are a set of git extensions to provide high-level repository operations for it. Git-flow is a merge based solution. It doesn&rsquo;t rebase feature branches.</p>

<ul>
<li>Checkout gitflow cheatsheet: <a href="http://danielkummer.github.io/git-flow-cheatsheet/">http://danielkummer.github.io/git-flow-cheatsheet/</a></li>
<li>Apps that support gitflow:

<ul>
<li>Source Tree: <a href="https://www.sourcetreeapp.com">https://www.sourcetreeapp.com</a></li>
<li>Git Tower: <a href="https://www.git-tower.com">https://www.git-tower.com</a></li>
</ul>
</li>
</ul>


<p>Note: Maybe after working for a long time with merge based Gitflow, you will find your git log a little bit confusing and look like that:</p>

<p><img src="/images/blog/2016-06-27-gitflow-mess.png"></p>

<p>Please take no worries about this, because there is still a part about <code>git rebase</code>. For now, you can continue to read the article <a href="http://endoflineblog.com/gitflow-considered-harmful">GitFlow considered harmful</a> to know more about the author issue.</p>

<h3>Gitflow pitfall</h3>

<ul>
<li>It makes the project&rsquo;s history completely unreadable with the <a href="https://stackoverflow.com/questions/9069061/what-is-the-difference-between-git-merge-and-git-merge-no-ff"><code>--no-ff</code> flag</a>. The &mdash;no-ff flag prevents git merge from executing a &ldquo;fast-forward&rdquo; if it detects that your current HEAD is an ancestor of the commit you&rsquo;re trying to merge. A fast-forward is when, instead of constructing a merge commit, git just moves your branch pointer to point at the incoming commit.</li>
<li>The master/develop split is redundant.</li>
<li>It&rsquo;s needlessly complex. And people make mistakes and break them by accident.</li>
</ul>


<h3>The Anti-gitflow</h3>

<ul>
<li>There is only one eternal branch &ndash; you can call it master, develop, current, next &ndash; whatever. I personally like &ldquo;master&rdquo;, and that&rsquo;s the name I&rsquo;ll use in the rest of the description, as it&rsquo;s convention by now in the Git world and immediately conveys its purpose.</li>
<li>All other branches (feature, release, hotfix, and whatever else you need) are temporary and only used as a convenience to share code with other developers and as a backup measure. They are always removed once the changes present on them land on master.</li>
<li>Features are integrated onto the master branch primarily in a way which keeps the history linear. You have a lot of leeway in how you want to enforce this. You can make it simply a convention that developers are encouraged, but not forced, to follow. On the other side of the spectrum, if you use something like Gerrit to manage your Git repositories (which I recommend, even if you don&rsquo;t practice code reviews &ndash; the permission system is fantastic, and if you ever decide you want code reviews, it&rsquo;ll be very easy to start doing them), you can set up permissions in such a way that actually forbids pushing merge commits to master, and that way ensure linear history.</li>
<li>Releases are done similarly to in GitFlow. You create a new branch for the release, branching off at the point in master that you decide has all the necessary features. From then on new work, aimed for the next release, is pushed to master as always, and any necessary changes are pushed to the release branch (in my opinion, it&rsquo;s an anti-pattern and a huge red flag if your release requires separate commits to work, but that&rsquo;s a topic for another article &ndash; for simplicity, let&rsquo;s assume you can&rsquo;t or don&rsquo;t want to change that). Finally, once the release is ready, you tag the top of the release branch. Then, because there is one eternal branch, there is only one way to get your release to be versioned permanently &ndash; and that is to merge the release branch into master and push that changed master. After that, all the changes that were made during the release are now part of master, and the release branch is deleted.</li>
<li>Hotfixes are very similar to releases, except you don&rsquo;t branch from an arbitrary commit on master, but from the release tag that you want to make the fix in. Again, work on master continues as always, and the necessary fixes are pushed to the hotfix branch. Once the fix is ready, the procedure is exactly the same as for a release &ndash; tag the top of the branch creating a new release, merge it into master, then delete the hotfix branch.</li>
</ul>


<h1>Pull Request</h1>

<p>Pull request is a feature that makes it easier for developers to collaborate. Pull request is a mechanism for a developer to notify team members that they have completed a feature. Some tricks to make Pull Requests more awesome for your project:</p>

<ul>
<li>Open a Pull Request as early as possible: Pull Requests are a great way to start a conversation of a feature, so start one as soon as possible- even before you are finished with the code. Your team can comment on the feature as it evolves, instead of providing all their feedback at the very end.</li>
<li>Pull Requests work branch to branch: No one has a fork of github/github. We make Pull Requests in the same repository by opening Pull Requests for branches.</li>
<li>A Pull Request doesn&rsquo;t have to be merged: Pull Requests are easy to make and a great way to get feedback and track progress on a branch. But some ideas don&rsquo;t make it. It&rsquo;s okay to close a Pull Request without merging; we do it all the time.</li>
</ul>


<p>Hint: Based on an article <a href="http://ben.balter.com/2015/12/08/types-of-pull-requests/">Type of Pull Request</a>, there are 6 types of PR. But <a href="http://ben.straub.cc/2015/04/02/wip-pull-request/"><code>WIP pattern</code></a> is the one that is using by lots of teams and companies. It follows the mantra of &ldquo;<strong>Open a Pull Request as early as possible</strong>&rdquo;.</p>

<h1>Doing Code Review</h1>

<blockquote><p>Source: <a href="https://github.com/thoughtbot/guides/tree/master/code-review">https://github.com/thoughtbot/guides/tree/master/code-review</a></p></blockquote>

<h3>Everyone</h3>

<ul>
<li>Accept that many programming decisions are opinions. Discuss tradeoffs, which you prefer, and reach a resolution quickly.</li>
<li>Ask questions; don&rsquo;t make demands. (&ldquo;What do you think about naming this :user_id?&rdquo;)</li>
<li>Ask for clarification. (&ldquo;I didn&rsquo;t understand. Can you clarify?&rdquo;)</li>
<li>Avoid selective ownership of code. (&ldquo;mine&rdquo;, &ldquo;not mine&rdquo;, &ldquo;yours&rdquo;)</li>
<li>Avoid using terms that could be seen as referring to personal traits. (&ldquo;dumb&rdquo;, &ldquo;stupid&rdquo;). Assume everyone is attractive, &ndash; intelligent, and well-meaning.</li>
<li>Be explicit. Remember people don&rsquo;t always understand your intentions online.</li>
<li>Be humble. (&ldquo;I&rsquo;m not sure &ndash; let&rsquo;s look it up.&rdquo;)</li>
<li>Don&rsquo;t use hyperbole. (&ldquo;always&rdquo;, &ldquo;never&rdquo;, &ldquo;endlessly&rdquo;, &ldquo;nothing&rdquo;)</li>
<li>Don&rsquo;t use sarcasm.</li>
<li>Keep it real. If emoji, animated gifs, or humor aren&rsquo;t you, don&rsquo;t force them. If they are, use them with aplomb.</li>
<li>Talk synchronously (e.g. chat, screensharing, in person) if there are too many &ldquo;I didn&rsquo;t understand&rdquo; or &ldquo;Alternative solution:&rdquo; comments. Post a follow-up comment summarizing the discussion.</li>
</ul>


<h3>Having Your Code Reviewed</h3>

<ul>
<li>Be grateful for the reviewer&rsquo;s suggestions. (&ldquo;Good call. I&rsquo;ll make that change.&rdquo;)</li>
<li>Don&rsquo;t take it personally. The review is of the code, not you.</li>
<li>Explain why the code exists. (&ldquo;It&rsquo;s like that because of these reasons. Would it be more clear if I rename this class/file/&ndash; method/variable?&rdquo;)</li>
<li>Extract some changes and refactorings into future tickets/stories.</li>
<li>Link to the code review from the ticket/story. (&ldquo;Ready for review: <a href="https://github.com/organization/project/pull/1">https://github.com/organization/project/pull/1</a>&rdquo;)</li>
<li>Push commits based on earlier rounds of feedback as isolated commits to the branch. Do not squash until the branch is ready &ndash; to merge. Reviewers should be able to read individual updates based on their earlier feedback.</li>
<li>Seek to understand the reviewer&rsquo;s perspective.</li>
<li>Try to respond to every comment.</li>
<li>Wait to merge the branch until Continuous Integration tells you the test suite is green in the &ndash; branch.</li>
<li>Merge once you feel confident in the code and its impact on the project.</li>
</ul>


<h3>Reviewing code</h3>

<p>Understand why the change is necessary (fixes a bug, improves the user experience, refactors the existing code). Then:</p>

<ul>
<li>Communicate which ideas you feel strongly about and those you don&rsquo;t.</li>
<li>Identify ways to simplify the code while still solving the problem.</li>
<li>If discussions turn too philosophical or academic, move the discussion offline to a regular Friday afternoon technique &ndash; discussion. In the meantime, let the author make the final decision on alternative implementations.</li>
<li>Offer alternative implementations, but assume the author already considered them. (&ldquo;What do you think about using a custom &ndash; validator here?&rdquo;)</li>
<li>Seek to understand the author&rsquo;s perspective.</li>
<li>Sign off on the pull request with a 👍 or &ldquo;Ready to merge&rdquo; comment.</li>
</ul>


<h1>Git templates</h1>

<p>To make things easier, we have adopted Issue template and Pull Request template that we think they are great to help the team to improve the productivity</p>

<blockquote><p><a href="https://gist.githubusercontent.com/tieubao/2a9fc10be45a67ab315ef3f8ead6530d/raw/e99d04268bf83389f4f728f386f79d9da3132480/issue-template.md">https://gist.githubusercontent.com/tieubao/2a9fc10be45a67ab315ef3f8ead6530d/raw/e99d04268bf83389f4f728f386f79d9da3132480/issue-template.md</a></p></blockquote>

<p><div><script src='https://gist.github.com/2a9fc10be45a67ab315ef3f8ead6530d.js'></script>
<noscript><pre><code>&lt;!--
Please use the following template to submit your issue. Following this template will allow us to quickly investigate and help you with your issue. Please be aware that issues which do not conform to this template may be closed.
--&gt;

### Status

BUG REPORT / TASK

### Checklist

Add checklist if this is a task

- [x] Add Facebook login
- [ ] Support X

### Steps to reproduce

1. First step
2. Second step
3. Third step

### Expected behaviour

How do you think the program should work? Add screenshots and code blocks if necessary.

### Actual behaviour

How does the program work in its current state?

### Environment

You may write here the specifications like the version of the project, operating system, or hardware if applicable.

### Logs / Stack trace

```
Insert your log/stack trace here
```

</code></pre></noscript></div>
</p>

<blockquote><p><a href="https://gist.githubusercontent.com/tieubao/98a83f179d06fe3e33e4dfe4f1395904/raw/4cd5eaa3586503c9a89b7cac34886e2769db01d1/pr-template.md">https://gist.githubusercontent.com/tieubao/98a83f179d06fe3e33e4dfe4f1395904/raw/4cd5eaa3586503c9a89b7cac34886e2769db01d1/pr-template.md</a></p></blockquote>

<p><div><script src='https://gist.github.com/98a83f179d06fe3e33e4dfe4f1395904.js'></script>
<noscript><pre><code>&lt;!--
This is a guide to use this Pull Request Template
&gt; DELETE THIS BLOCK TO AFTER READING

# Title
- Put [WIP] in front of the Pull Request that you are working on
- Clear [WIP] after you completed and ping the reviewer

# Body
- You have to fill out all the sections
- Delete or put N/A if the section is nil
--&gt;

#### Status

READY / IN DEVELOPMENT / HOLD

#### What does this PR accomplish?

- [x] Adds a shiny new button
- [ ] Fixed serious memory leak
- [ ] ...

#### Where should the reviewer start?

#### How should this be manually tested?

#### Any background context you want to provide?

#### What are the relevant Git tickets?

Use [Github closing words](https://help.github.com/articles/closing-issues-via-commit-messages/) such as:  
This closes #x

#### Screenshots (if appropriate)

#### Questions:

- Is there a blog post?
- Does the knowledge base need an update?
- Does this add new dependencies which need to be added to?
</code></pre></noscript></div>
</p>

<br>


<hr />

<p><sup>And finally, Atlassian has a full tutorials from scratch, you can find it at: <a href="https://www.atlassian.com/git/tutorials/what-is-version-control">https://www.atlassian.com/git/tutorials/what-is-version-control</a><sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do we split equity between co-founders?]]></title>
    <link href="http://tieubao.github.io/writing/a/how-do-we-split-equity-between-us-co-founders/"/>
    <updated>2015-02-09T17:06:03+07:00</updated>
    <id>http://tieubao.github.io/writing/a/how-do-we-split-equity-between-us-co-founders</id>
    <content type="html"><![CDATA[<p>It’s a very fair question to ask. My own co-founder Bryan and I asked the same question of ourselves when we launched our startup Embarke. Bryan and I had only known each other for a couple months, yet it was important to both of us to have an open and honest partnership from day one. We also knew the importance of figuring this stuff out early, while we could still look at it objectively.</p>

<p>The purpose of this post is to not just share with you what we did and the process we went through, but to also give you the tool we built to help us along the way.</p>

<h2>Yes, it can be uncomfortable. Get over it.</h2>

<p>I’ve seen far too many founders put this off because it’s an uncomfortable conversation. The reality is, if you’re not comfortable talking about uncomfortable things with your co-founder(s) &hellip; you’ve got bigger problems. This relationship can’t be one of secrecy or procrastination. The nature of an entrepreneur is to take something on…head on…and right now. This equity split conversation is one of the first (of very many more) uncomfortable conversations that you’ll have with your co-founder, and it’s a great signal for how well you’ll work through future situations.</p>

<blockquote><p>This relationship can’t be one of secrecy or procrastination. The nature of an entrepreneur is to take something on&mdash;head on&mdash;and right now.</p></blockquote>

<p>So, we started digging and found countless resources talking about how equity should and shouldn’t be split among founders. The problem (with any advice) is, everyone’s got an opinion. Many of those opinions of course are based on their previous experience which may or may not be related to your situation, how far along the business is, and countless other variables. So, with all of these opinions and calculators out there, how did we come to terms with it?</p>

<p>We used them all.</p>

<p>Then we built our own tool to leverage them, and dove in.</p>

<h2>It’s not about you.</h2>

<p>It’s important to realize that this isn’t entirely about you. Through this process, we learned things about each other we didn’t know. We learned more about each other’s skill sets, our pasts, projects, accomplishments, and what we could each truly bring to the table. Sure, it’s a little about you. But it’s got to be about your co-founder(s) as well&hellip; so you need to have an open and receptive mind.</p>

<p>What was the end result for us? We were both very happy with the outcome, we learned a TON about each other that we didn’t know before, and walked away from the process more comfortable about working together than ever.</p>

<p>&ldquo;Alright already. Give me the tool!&rdquo;</p>

<p>Bryan and I each took our tool and started mapping out what aspects we felt were important to our business, and what we felt we each brought to the table. We did this independently of each other over a day or two. Then, we sat down and went through everything item-by-item. That is where the magic happens.</p>

<p><a href="https://al.bsharah.com/wp-content/uploads/2014/03/Embarke-CoFounder-Equity-Split-Template-2016-01.xlsx">The spreadsheet</a> has 5 different calculators in it, and a final box that averages everything out among all 5. Hopefully it’s intuitive enough for you to use. Any questions, hit me up in the comments!</p>

<h4>Source: <a href="https://al.bsharah.com/co-founders-its-time-to-split-that-equity/">AL BSHARAH</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Divide Founders Stock Equally? Bad Idea]]></title>
    <link href="http://tieubao.github.io/writing/a/divide-founders-stock-equally-bad-idea/"/>
    <updated>2015-02-05T16:51:32+07:00</updated>
    <id>http://tieubao.github.io/writing/a/divide-founders-stock-equally-bad-idea</id>
    <content type="html"><![CDATA[<p>You and some co-venturers have come up with a business plan and an idea that you want to bring to fruition. How do you decide how much each person will own in the company?</p>

<p>Many entrepreneurs think that each founder should own equal shares. This can be problematic, for many reasons.</p>

<p>Here are a few things to think about when dividing ownership and founders stock.</p>

<ul>
<li><strong>Who is bringing the funds to the table?</strong> Money is important and without initial funding, you can&rsquo;t get a business off the ground. But is the bank-roller entitled to a larger proportion of the shares? The decision will depend on how much money he or she is putting in and what his or her additional roles are in the company.</li>
<li><strong>Whose idea was it?</strong> There is some value to put on the original idea. But simply coming up with the idea shouldn&rsquo;t give majority ownership to the founder. Was the idea patented? A patented idea carries more tangible weight than an abstract idea.</li>
<li><strong>Who will be doing the lion&rsquo;s share of the work?</strong> Set agreements on day one for who will be contributing work. One person may be contributing valuable managerial labor while another one might be designing important elements.</li>
<li><strong>What are your business projections?</strong> This is an important question because it helps you figure out who is in the company for the long haul. Which brings us to the final point.</li>
<li><strong>Have vesting restrictions.</strong> Your stock agreements should have provisions stating that no founder can pull out stock in the company until the lapse of a certain period of time. The last thing you want is for someone to put in the minimal and cash out early at the same proportion as the founders who are toiling away daily.</li>
</ul>


<p>Equity splitting between founders is very important and can be the source of much business litigation in the future. Remember that the startup equity sharing can also bring control issues and voting issues. You need to be careful who has control and who has voting rights in the company as well.</p>

<p>Also <strong>keep in mind that not everyone needs to be an &ldquo;owner.&rdquo;</strong> You don&rsquo;t want too many cooks in the kitchen. See if any of the initial contributors can have a different role, perhaps as a key employee with a different class of stock ownership.</p>

<h4>Source: <a href="https://blogs.findlaw.com/free_enterprise/2012/04/equal-shares-for-founders-stock-bad-idea.html">FindLaw</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startup notes]]></title>
    <link href="http://tieubao.github.io/writing/a/startup-notes/"/>
    <updated>2015-01-22T20:59:25+07:00</updated>
    <id>http://tieubao.github.io/writing/a/startup-notes</id>
    <content type="html"><![CDATA[<ul>
<li>CEO > all: The CEO gets more. Always.</li>
<li>Startup: Team &mdash; way to &mdash;> market</li>
<li>Startup == Growth</li>
<li>Teamwork == <a href="/2014/12/05/it-is-hard-to-become-a-team-member/">Synchronisation</a></li>
<li>Lean Startup == Validated Learning</li>
<li>Fail quickly</li>
<li>Know how to fail</li>
<li>Know how to give up</li>
<li>Equal shares is <a href="2019/02/09/divide-founders-stock-equally-bad-idea/">not a good idea</a></li>
<li>95% startups fail because of team</li>
<li>5% because of market</li>
<li>300% effort</li>
<li>The Minimum Viable Team: Hustler, Hipster &amp; Hacker</li>
</ul>


<p><iframe src="http://www.slideshare.net/slideshow/embed_code/33588747 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<ul>
<li>Startup 101</li>
</ul>


<p><iframe src="http://www.slideshare.net/slideshow/embed_code/21217855 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<ul>
<li>How to find your co-founder</li>
</ul>


<p><iframe src="http://www.slideshare.net/slideshow/embed_code/16773733 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<hr />

<p>The happy startup:</p>

<ul>
<li>Define your startup DNA</li>
<li>Keep the main thing, the main thing</li>
<li>Bring design on board from day one</li>
<li>Validate ideas early and test assumptions</li>
<li>Build a business, not a pitch</li>
<li>Stop selling and start listening</li>
<li>Get the balance right between MVP and perfection</li>
<li>Get a mentor and build your support network</li>
<li>90% of entrepreneurship is sales. It’s time to start hustling.</li>
<li>It’s all about people. Hire the best you can</li>
</ul>

]]></content>
  </entry>
  
</feed>
